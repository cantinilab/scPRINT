# Autogenerated by configen, do not edit.
# If encountering an error, please file an issue @
# https://github.com/romesco/hydra-lightning
# fmt: off
# isort: skip_file
# flake8: noqa
# Hydra + Lightning
from dataclasses import dataclass
from typing import Optional, Callable, Any

from omegaconf import MISSING


@dataclass
class TrainerConf:
    _target_: str = "pytorch_lightning.trainer.Trainer"
    logger: Any = True  # Union[LightningLoggerBase, Iterable[LightningLoggerBase], bool]
    checkpoint_callback: bool = True
    callbacks: Any = None  # Optional[List[Callback]]
    default_root_dir: Optional[str] = None
    gradient_clip_val: float = 0
    process_position: int = 0
    num_nodes: int = 1
    num_processes: int = 1
    gpus: Any = None  # Union[int, str, List[int], NoneType]
    auto_select_gpus: bool = False
    tpu_cores: Any = None  # Union[int, str, List[int], NoneType]
    log_gpu_memory: Optional[str] = None
    progress_bar_refresh_rate: int = 1
    overfit_batches: Any = 0.0  # Union[int, float]
    track_grad_norm: Any = -1  # Union[int, float, str]
    check_val_every_n_epoch: int = 1
    fast_dev_run: Any = False  # Union[int, bool]
    accumulate_grad_batches: Any = 1  # Union[int, Dict[int, int], List[list]]
    max_epochs: int = 1000
    min_epochs: int = 1
    max_steps: Optional[int] = None
    min_steps: Optional[int] = None
    limit_train_batches: Any = 1.0  # Union[int, float]
    limit_val_batches: Any = 1.0  # Union[int, float]
    limit_test_batches: Any = 1.0  # Union[int, float]
    val_check_interval: Any = 1.0  # Union[int, float]
    flush_logs_every_n_steps: int = 100
    log_every_n_steps: int = 50
    accelerator: Any = None  # Union[str, Accelerator, NoneType]
    sync_batchnorm: bool = False
    precision: int = 32
    weights_summary: Optional[str] = "top"
    weights_save_path: Optional[str] = None
    num_sanity_val_steps: int = 2
    truncated_bptt_steps: Optional[int] = None
    resume_from_checkpoint: Any = None  # Union[str, Path, NoneType]
    profiler: Any = None  # Union[BaseProfiler, bool, str, NoneType]
    benchmark: bool = False
    deterministic: bool = False
    reload_dataloaders_every_epoch: bool = False
    auto_lr_find: Any = False  # Union[bool, str]
    replace_sampler_ddp: bool = True
    terminate_on_nan: bool = False
    auto_scale_batch_size: Any = False  # Union[str, bool]
    prepare_data_per_node: bool = True
    plugins: Any = None   # Union[str, list, NoneType]
    amp_backend: str = "native"
    amp_level: str = "O2"
    distributed_backend: Optional[str] = None
    automatic_optimization: Optional[bool] = None
    move_metrics_to_cpu: bool = False
    enable_pl_optimizer: bool = False


@dataclass
class EarlyStoppingConf:
    _target_: str = "pytorch_lightning.callbacks.EarlyStopping"
    monitor: str = "early_stop_on"
    min_delta: float = 0.0
    patience: int = 3
    verbose: bool = False
    mode: str = "auto"
    strict: bool = True


@dataclass
class ModelCheckpointConf:
    _target_: str = "pytorch_lightning.callbacks.ModelCheckpoint"
    filepath: Optional[str] = None
    monitor: Optional[str] = None
    verbose: bool = False
    save_last: Optional[bool] = None
    save_top_k: Optional[int] = None
    save_weights_only: bool = False
    mode: str = "auto"
    period: int = 1
    prefix: str = ""
    dirpath: Any = None  # Union[str, Path, NoneType]
    filename: Optional[str] = None


@dataclass
class ProgressBarConf:
    _target_: str = "pytorch_lightning.callbacks.ProgressBar"
    refresh_rate: int = 1
    process_position: int = 0



@dataclass
class AccuracyConf:
    _target_: str = "pytorch_lightning.metrics.classification.Accuracy"
    threshold: float = 0.5
    compute_on_step: bool = True
    dist_sync_on_step: bool = False
    process_group: Any = None
    dist_sync_fn: Callable = None


@dataclass
class FbetaConf:
    _target_: str = "pytorch_lightning.metrics.classification.Fbeta"
    num_classes: int = MISSING
    beta: float = 1.0
    threshold: float = 0.5
    average: str = "micro"
    multilabel: bool = False
    compute_on_step: bool = True
    dist_sync_on_step: bool = False
    process_group: Any = None


@dataclass
class PrecisionConf:
    _target_: str = "pytorch_lightning.metrics.classification.Precision"
    num_classes: int = 1
    threshold: float = 0.5
    average: str = "micro"
    multilabel: bool = False
    compute_on_step: bool = True
    dist_sync_on_step: bool = False
    process_group: Any = None

@dataclass
class DataLoaderConf:
    _target_: str = "torch.utils.data.dataloader.DataLoader"
    dataset: Any = MISSING
    batch_size: Any = 1
    shuffle: Any = False
    sampler: Any = None
    batch_sampler: Any = None
    num_workers: Any = 0
    collate_fn: Any = None
    pin_memory: Any = False
    drop_last: Any = False
    timeout: Any = 0
    worker_init_fn: Any = None
    multiprocessing_context: Any = None
    generator: Any = None

@dataclass
class DatasetConf:
    _target_: str = "torch.utils.data.dataset.Dataset"


@dataclass
class DistributedSamplerConf:
    _target_: str = "torch.utils.data.distributed.DistributedSampler"
    dataset: Any = MISSING
    num_replicas: Any = None
    rank: Any = None
    shuffle: Any = True
    seed: Any = 0

@dataclass
class WeightedRandomSamplerConf:
    _target_: str = "torch.utils.data.sampler.WeightedRandomSampler"
    weights: Any = MISSING
    num_samples: Any = MISSING
    replacement: Any = True
    generator: Any = None


@dataclass
class AdamConf:
    _target_: str = "torch.optim.adam.Adam"
    params: Any = MISSING
    lr: Any = 0.001
    betas: Any = (0.9, 0.999)
    eps: Any = 1e-08
    weight_decay: Any = 0
    amsgrad: Any = False


@dataclass
class MSELossConf:
    _target_: str = "torch.nn.modules.loss.MSELoss"
    size_average: Any = None
    reduce: Any = None
    reduction: str = "mean"


@dataclass
class MultiLabelMarginLossConf:
    _target_: str = "torch.nn.modules.loss.MultiLabelMarginLoss"
    size_average: Any = None
    reduce: Any = None
    reduction: str = "mean"


@dataclass
class LambdaLRConf:
    _target_: str = "torch.optim.lr_scheduler.LambdaLR"
    optimizer: Any = MISSING
    lr_lambda: Any = MISSING
    last_epoch: Any = -1

@dataclass
class RMSpropConf:
    _target_: str = "torch.optim.rmsprop.RMSprop"
    params: Any = MISSING
    lr: Any = 0.01
    alpha: Any = 0.99
    eps: Any = 1e-08
    weight_decay: Any = 0
    momentum: Any = 0
    centered: Any = False
